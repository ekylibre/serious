= render 'turns_jauge', game: @game

.container
  - if current_participation.organizer?
    %h2
      %em= "Deux ex machina"
      %small= @game.state.text
    - if @game.can_prepare?
      = link_to('Initialiser', prepare_game_path(@game), method: :post, class: 'btn btn-default')
    - if @game.can_start?
      = link_to('Commencer', start_game_path(@game), method: :post, class: 'btn btn-default')
      = link_to('Annuler', cancel_game_path(@game), method: :post, class: 'btn btn-default')
    - if @game.really_running?
      - if @game.issues.any?
        .btn-group
          .dropdown
            %button#trigger-issue.btn.btn-default.dropdown-toggle{ aria: {expanded: 'true', haspopup: 'true'}, data: {toggle: 'dropdown'}, type: 'button'}
              = ScenarioIssue.model_name.human
              %span.caret
            %ul.dropdown-menu
              - @game.issues.each do |issue|
                %li= link_to(issue.name, trigger_issue_game_path(issue), method: :post,  class: 'dropdown-toggle')
      = link_to('Évaluer', evaluate_game_path(@game), method: :post, class: 'btn btn-default')
    - if @game.running?
      = link_to('Arrêter', stop_game_path(@game), method: :post, class: 'btn btn-default')
    - if current_user.administrator? && @game.can_edit?
      = link_to('Modifier', edit_backend_game_path(current_participation.game), class: 'btn btn-default')
    - if current_user.administrator? && Rails.env.development?
      %p Vous pouvez utiliser la commande suivante pour configurer localement les noms de domaines :
      %pre
        = "echo '127.0.0.1 #{@game.farms.map(&:domain).join(' ')}' | sudo tee --append /etc/hosts"

  - if @game.description?
    %p= @game.description

  - if @game.current_turn and (broadcasts = @game.broadcasts.where(release_turn: @game.current_turn.number)) and broadcasts.any?
    %h2
      %i.glyphicon.glyphicon-bullhorn
      = :broadcasts.tl
    #carousel.carousel.slide{data: {ride: 'carousel'}}
      %ol.carousel-indicators
        - broadcasts.size.times do |index|
          - classes = []
          - classes << 'active' if index.zero?
          %li{data: {target: '#carousel', slide_to: index}, class: classes}
      .carousel-inner
        - broadcasts.each_with_index do |broadcast, index|
          - classes = []
          - classes << 'active' if index.zero?
          .item{class: classes}
            .carousel-content
              %div
                %h4= truncate(broadcast.name, length: 90)
                %p= truncate(broadcast.content, length: 200)

      - if broadcasts.count > 1
        = link_to('#carousel', class: 'left carousel-control', data: {slide: 'prev'}) do
          %span.glyphicon.glyphicon-chevron-left

        = link_to('#carousel', class: 'right carousel-control', data: {slide: 'next'}) do
          %span.glyphicon.glyphicon-chevron-right


  - participants = @game.participants.order(:name).select{|p| current_participation.can_see?(p) }
  - if participants.any?
    %h2
      %i.glyphicon.glyphicon-briefcase
      - if current_participation.organizer?
        Participants
      - else
        Partenaires
    #participants
      - @game.participants.order(:name).each do |participant|
        - next unless current_participation.can_see?(participant)
        - classes = []
        - classes << 'with-stand' if participant.present
        .participant.box-scene{class: classes}
          - side = [:right, :left, :top, :bottom][participant.code.to_i(36).modulo(4)]
          .box{class: "hover-on-#{side}"}
            - url = {controller: participant.class.name.tableize, action: :show, id: participant.id}
            = link_to(url, class: 'participant-front face face-front') do
              - if participant.present
                .stand-number
                  = participant.stand_number
              = participant_logo(participant)
              .participant-caption
                - if current_participant and (count = current_participant.affairs_with(participant).count) and count > 0
                  %span.affairs-count
                    %span.glyphicon.glyphicon-briefcase
                    = count
                = participant.name
            = link_to(url, class: "participant-details face face-#{side}") do
              %h3= participant.name
              %span.label.label-primary= participant.class.model_name.human
              - [:contractor, :subcontractor, :supplier, :customer, :lender, :borrower, :insurer, :insured].each do |state|
                - if participant.send(state)
                  %span.label.label-success= Participant.human_attribute_name(state)

