- if @game.running?
  - total_duration = @game.total_duration
  - value = 100.0 * @game.elapsed_duration / @game.total_duration
  - value = 100.0 if value > 100.0
  %span.turns-gauge
    - duration = 0
    - @game.turns.find_each do |turn|
      - if turn.number > 1
        %span.bearing{style: "left: #{(100.0 * duration/total_duration).round(4)}%", class: (turn.future? ? "future" : turn.current? ? "active" : "past")}
      %span.interval{style: "left: #{(100.0 * duration/total_duration).round(4)}%; width: #{(100.0 * 60 * turn.duration/total_duration).round(4)}%", class: (turn.future? ? "future" : turn.current? ? "active" : "past"), title: turn.name + " (#{:x_minutes.tl(count: turn.duration)})", data: {toggle: "tooltip", placement: "bottom"}}
      - duration += turn.duration * 60
      - break if duration >= total_duration
    %span.level{style: "width: #{value.round(4)}%"}

.container
  %h1= h('Partie ') + content_tag(:strong, @game.name)

  - if current_participation.organizer?
    - if current_participation.game.can_run?
      = link_to('Lancer la partie', run_game_path(current_participation.game), method: :post, class: 'btn btn-default')
      - if current_user.administrator?
        = link_to('Modifier', edit_backend_game_path(current_participation.game), class: 'btn btn-default')


  - if @game.description?
    %p= @game.description


  - if @game.current_turn and (broadcasts = @game.broadcasts.where(release_turn: @game.current_turn.number)) and broadcasts.any?
    %h2
      %i.glyphicon.glyphicon-bullhorn
      News
    #carousel.carousel.slide{data: {ride: 'carousel'}}
      %ol.carousel-indicators
        - broadcasts.size.times do |index|
          - classes = []
          - classes << 'active' if index.zero?
          %li{data: {target: '#carousel', slide_to: index}, class: classes}
      .carousel-inner
        - broadcasts.each_with_index do |broadcast, index|
          - classes = []
          - classes << 'active' if index.zero?
          .item{class: classes}
            .carousel-content
              %div
                %h4= truncate(broadcast.name, length: 90)
                %p= truncate(broadcast.content, length: 200)

      - if broadcasts.count > 1
        = link_to('#carousel', class: 'left carousel-control', data: {slide: 'prev'}) do
          %span.glyphicon.glyphicon-chevron-left

        = link_to('#carousel', class: 'right carousel-control', data: {slide: 'next'}) do
          %span.glyphicon.glyphicon-chevron-right


  - participants = @game.participants.order(:name).select{|p| current_participation.can_see?(p) }
  - if participants.any?
    %h2
      %i.glyphicon.glyphicon-briefcase
      - if current_participation.organizer?
        Participants
      - else
        Partenaires
    #participants
      - @game.participants.order(:name).each do |participant|
        - next unless current_participation.can_see?(participant)
        - classes = []
        - classes << 'with-stand' if participant.present
        .participant.box-scene{class: classes}
          - side = [:right, :left, :top, :bottom][participant.code.to_i(36).modulo(4)]
          .box{class: "hover-on-#{side}"}
            - url = {controller: participant.class.name.tableize, action: :show, id: participant.id}
            = link_to(url, class: 'participant-front face face-front') do
              - if participant.present
                .stand-number
                  = participant.stand_number
              = participant_logo(participant)
              .participant-caption
                - if current_participant and (count = current_participant.affairs_with(participant).count) and count > 0
                  %span.affairs-count
                    %span.glyphicon.glyphicon-briefcase
                    = count
                = participant.name
            = link_to(url, class: "participant-details face face-#{side}") do
              %h3= participant.name
              %span.label.label-primary= participant.class.model_name.human
              - [:contractor, :subcontractor, :supplier, :customer, :lender, :borrower, :insurer, :insured].each do |state|
                - if participant.send(state)
                  %span.label.label-success= Participant.human_attribute_name(state)


  - curves = current_game.reference_curves
  - if curves.any?
    %h2
      %i.glyphicon.glyphicon-stats
      Cours de référence
    #curves
      - current_game.reference_curves.each do |curve|
        .curve
          %h3= curve.name
          :ruby
            serie = {name: curve.name, data: curve.steps.where('turn <= ?', current_turn).order(:turn).map{|s| [s.turn , s.amount.to_s.to_f]}}
            if curve.interpolation_method_previous?
              serie[:step] = 'left'
            elsif curve.interpolation_method_following?
              serie[:step] = 'right'
            end
          .box-content= line_chart([serie],chart: {height: 150}, y_axis: {title: {text: "#{:value.tl} (#{curve.unit_name})"}})



  - if current_user.administrator?
    %h2
      %i.glyphicon.glyphicon-wrench
      Installation technique
    %p Pour configurer les fermes, veuillez executer la commande suivante dans Ekylibre
    %pre
      = "rake seriously:prepare GAME_URL=#{api_v1_game_url(@game)} TOKEN=#{Shellwords.escape(@game.access_token)}"
    - if Rails.env.development?
      %p Vous pouvez utiliser la commande suivante pour configurer localement les noms de domaines :
      %pre
        = "echo '127.0.0.1 #{@game.farms.map(&:domain).join(' ')}' | sudo tee --append /etc/hosts"
