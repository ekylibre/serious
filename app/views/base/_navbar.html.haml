%nav.navbar.navbar-inverse.navbar-fixed-top
  .container-fluid
    .navbar-header
      = link_to('Game of Farms', root_url, class: 'navbar-brand')
    .collapse.navbar-collapse
      - if current_user
        - if current_user.administrator?
          %ul.nav.navbar-nav
            - [:scenarios, :games, :users].each do |name|
              %li{class: controller_name =~ /^#{name.to_s.singularize}/ ? :active : nil}= link_to("actions.backend/#{name}.index".t, controller: "backend/#{name}".to_sym, action: :index)
        - else
          %ul.nav.navbar-nav

        %ul.nav.navbar-nav.navbar-right
          - if current_participation
            - if current_participant
              - if current_participant.application_url
                %li
                  = link_to(current_participant.application_url) do
                    %i.glyphicon.glyphicon-transfer
              %li
                = link_to(participant_path(current_participant)) do
                  %i.glyphicon.glyphicon-home
            - if @current_game.running?
              - if @game && controller_path == "games" && action_name == "show"
                %li
                  %span.navbar-text= @game.name
              - else
                %li
                  = link_to(game_path(current_participation.game)) do
                    %i.glyphicon.glyphicon-th
              - if (turn = current_game.current_turn)
                %li
                  %p.navbar-text{title: turn.stopped_at.l}
                    %span.glyphicon.glyphicon-hourglass
                    %span#main-countdown{data: {countdown: turn.stopped_at.utc.l(format: '%Y-%m-%dT%H:%M:%S'), countdown_restart: current_turn_games_path}}
                %li
                  %p.navbar-text
                    %span.glyphicon.glyphicon-calendar
                    %span#turn-name.date= turn.name

          - if current_user
            %li.dropdown
              = link_to('#', class: 'dropdown-toggle', data: {toggle: 'dropdown'}, role: 'button', aria: {haspopup: 'true', expanded: 'false'}) do
                %i.glyphicon{class: "glyphicon-#{!current_participation ? :user : current_participation.organizer? ? :king : current_participation.participant.farm? ? :grain : :briefcase}"}
                - if current_participant
                  = current_participant.name
                %span.caret
              %ul.dropdown-menu
                - if current_game && current_game.running?
                  %li.dropdown-header= "Affichage"
                  - modes = [:simple, :map, :curves]
                  - modes << :rating if current_participation.organizer? || current_user.administrator?
                  - modes.each do |mode|
                    %li{class: (mode.to_s == session[:view_mode].to_s ? 'active' : nil)}= link_to("#{mode}_view_mode".tl, {mode: mode})
                  %li.divider{role: 'separator'}
                - current_user.active_games.each do |game|
                  - if game.current_turn.nil?
                    - Time.now > game.last_turn.stopped_at ? turn_info = 'Partie terminée' :  turn_info = 'La partie est en pause'
                  - else
                    - turn_info = "#{game.current_turn.number}/#{game.turns_count}"
                  %li.dropdown-header= "#{game.name} (#{turn_info})"
                  - game.participations.where(user_id: current_user.id).sort{|a,b| a.name <=> b.name }.each do |participation|
                    - classes = []
                    - classes << :active if current_participation == participation
                    %li{class: classes}
                      = link_to(participation_path(participation)) do
                        %span.glyphicon{class: "glyphicon-#{participation.organizer? ? :king : participation.participant.farm? ? :grain : :briefcase}"}
                        = participation.name
                  %li.divider{role: 'separator'}
                %li= link_to('Mon compte', user_path(current_user))
                %li= link_to('Se déconnecter', destroy_user_session_path, method: :delete)
